version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: swim_forecast_db
    ports:
      - "5432:5432" # Optional: Expose port to host for direct DB access if needed
    env_file:
      - .env # For POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env # For DATABASE_URL, OPENWEATHER_API_KEY etc.
    volumes:
      # The source ./backend (relative to docker-compose.yml) is mounted into /app/backend in the container.
      # This aligns with where the Dockerfile now copies the code.
      - ./backend:/app/backend
    # The command needs to specify the module path backend.main and watch the correct directory for reloads.
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/backend
    networks:
      - app-network
    depends_on:
      db: # Backend depends on the database service
        condition: service_healthy # Wait for DB to be healthy
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_BASE_URL: http://backend:8000
    ports:
      - "8080:80"
    depends_on:
      - backend # Frontend depends on the backend service
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: # Define the named volume for PostgreSQL data persistence
    driver: local
